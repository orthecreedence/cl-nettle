;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.11
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :nettle)



(cl:defconstant #.(lispify "AES_BLOCK_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "AES_MIN_KEY_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "AES_MAX_KEY_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "AES_KEY_SIZE" 'constant) 32)

(cffi:defcstruct #.(lispify "aes_ctx" 'classname)
	(#.(lispify "keys" 'slotname) :pointer)
	(#.(lispify "nrounds" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_aes_set_encrypt_key" #.(lispify "nettle_aes_set_encrypt_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_aes_set_decrypt_key" #.(lispify "nettle_aes_set_decrypt_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_aes_invert_key" #.(lispify "nettle_aes_invert_key" 'function)) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_aes_encrypt" #.(lispify "nettle_aes_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_aes_decrypt" #.(lispify "nettle_aes_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cl:defconstant #.(lispify "ARCFOUR_MIN_KEY_SIZE" 'constant) 1)

(cl:defconstant #.(lispify "ARCFOUR_MAX_KEY_SIZE" 'constant) 256)

(cl:defconstant #.(lispify "ARCFOUR_KEY_SIZE" 'constant) 16)

(cffi:defcstruct #.(lispify "arcfour_ctx" 'classname)
	(#.(lispify "S" 'slotname) :pointer)
	(#.(lispify "i" 'slotname) :pointer)
	(#.(lispify "j" 'slotname) :pointer))

(cffi:defcfun ("nettle_arcfour_set_key" #.(lispify "nettle_arcfour_set_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_arcfour_crypt" #.(lispify "nettle_arcfour_crypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cl:defconstant #.(lispify "ARCTWO_BLOCK_SIZE" 'constant) 8)

(cl:defconstant #.(lispify "ARCTWO_MIN_KEY_SIZE" 'constant) 1)

(cl:defconstant #.(lispify "ARCTWO_MAX_KEY_SIZE" 'constant) 128)

(cl:defconstant #.(lispify "ARCTWO_KEY_SIZE" 'constant) 8)

(cffi:defcstruct #.(lispify "arctwo_ctx" 'classname)
	(#.(lispify "S" 'slotname) :pointer))

(cffi:defcfun ("nettle_arctwo_set_key_ekb" #.(lispify "nettle_arctwo_set_key_ekb" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer)
  (ekb :unsigned-int))

(cffi:defcfun ("nettle_arctwo_set_key" #.(lispify "nettle_arctwo_set_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_arctwo_set_key_gutmann" #.(lispify "nettle_arctwo_set_key_gutmann" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_arctwo_encrypt" #.(lispify "nettle_arctwo_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_arctwo_decrypt" #.(lispify "nettle_arctwo_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(defanonenum 
	(#.(lispify "ASN1_TYPE_CONSTRUCTED" 'enumvalue) #.(cl:ash 1 12))
	(#.(lispify "ASN1_CLASS_UNIVERSAL" 'enumvalue) #.0)
	(#.(lispify "ASN1_CLASS_APPLICATION" 'enumvalue) #.(cl:ash 1 13))
	(#.(lispify "ASN1_CLASS_CONTEXT_SPECIFIC" 'enumvalue) #.(cl:ash 2 13))
	(#.(lispify "ASN1_CLASS_PRIVATE" 'enumvalue) #.(cl:ash 3 13))
	(#.(lispify "ASN1_CLASS_MASK" 'enumvalue) #.(cl:ash 3 13))
	(#.(lispify "ASN1_CLASS_SHIFT" 'enumvalue) #.13))

(cffi:defcenum #.(lispify "asn1_type" 'enumname)
	(#.(lispify "ASN1_BOOLEAN" 'enumvalue :keyword) #.1)
	(#.(lispify "ASN1_INTEGER" 'enumvalue :keyword) #.2)
	(#.(lispify "ASN1_BITSTRING" 'enumvalue :keyword) #.3)
	(#.(lispify "ASN1_OCTETSTRING" 'enumvalue :keyword) #.4)
	(#.(lispify "ASN1_NULL" 'enumvalue :keyword) #.5)
	(#.(lispify "ASN1_IDENTIFIER" 'enumvalue :keyword) #.6)
	(#.(lispify "ASN1_REAL" 'enumvalue :keyword) #.9)
	(#.(lispify "ASN1_ENUMERATED" 'enumvalue :keyword) #.10)
	(#.(lispify "ASN1_UTF8STRING" 'enumvalue :keyword) #.12)
	(#.(lispify "ASN1_SEQUENCE" 'enumvalue :keyword) #.(cl:logior 16 (cl:ash 1 12)))
	(#.(lispify "ASN1_SET" 'enumvalue :keyword) #.(cl:logior 17 (cl:ash 1 12)))
	(#.(lispify "ASN1_PRINTABLESTRING" 'enumvalue :keyword) #.19)
	(#.(lispify "ASN1_TELETEXSTRING" 'enumvalue :keyword) #.20)
	(#.(lispify "ASN1_IA5STRING" 'enumvalue :keyword) #.22)
	(#.(lispify "ASN1_UTC" 'enumvalue :keyword) #.23)
	(#.(lispify "ASN1_UNIVERSALSTRING" 'enumvalue :keyword) #.28)
	(#.(lispify "ASN1_BMPSTRING" 'enumvalue :keyword) #.30))

(cffi:defcenum #.(lispify "asn1_iterator_result" 'enumname)
	#.(lispify "ASN1_ITERATOR_ERROR" 'enumvalue :keyword)
	#.(lispify "ASN1_ITERATOR_PRIMITIVE" 'enumvalue :keyword)
	#.(lispify "ASN1_ITERATOR_CONSTRUCTED" 'enumvalue :keyword)
	#.(lispify "ASN1_ITERATOR_END" 'enumvalue :keyword))

(cffi:defcstruct #.(lispify "asn1_der_iterator" 'classname)
	(#.(lispify "buffer_length" 'slotname) :unsigned-int)
	(#.(lispify "buffer" 'slotname) :pointer)
	(#.(lispify "pos" 'slotname) :unsigned-int)
	(#.(lispify "type" 'slotname) #.(lispify "asn1_type" 'enumname))
	(#.(lispify "length" 'slotname) :unsigned-int)
	(#.(lispify "data" 'slotname) :pointer))

(cffi:defcfun ("nettle_asn1_der_iterator_first" #.(lispify "nettle_asn1_der_iterator_first" 'function)) #.(lispify "asn1_iterator_result" 'enumname)
  (iterator :pointer)
  (length :unsigned-int)
  (input :pointer))

(cffi:defcfun ("nettle_asn1_der_iterator_next" #.(lispify "nettle_asn1_der_iterator_next" 'function)) #.(lispify "asn1_iterator_result" 'enumname)
  (iterator :pointer))

(cffi:defcfun ("nettle_asn1_der_decode_constructed" #.(lispify "nettle_asn1_der_decode_constructed" 'function)) #.(lispify "asn1_iterator_result" 'enumname)
  (i :pointer)
  (contents :pointer))

(cffi:defcfun ("nettle_asn1_der_decode_constructed_last" #.(lispify "nettle_asn1_der_decode_constructed_last" 'function)) #.(lispify "asn1_iterator_result" 'enumname)
  (i :pointer))

(cffi:defcfun ("nettle_asn1_der_decode_bitstring" #.(lispify "nettle_asn1_der_decode_bitstring" 'function)) #.(lispify "asn1_iterator_result" 'enumname)
  (i :pointer)
  (contents :pointer))

(cffi:defcfun ("nettle_asn1_der_decode_bitstring_last" #.(lispify "nettle_asn1_der_decode_bitstring_last" 'function)) #.(lispify "asn1_iterator_result" 'enumname)
  (i :pointer))

(cffi:defcfun ("nettle_asn1_der_get_uint32" #.(lispify "nettle_asn1_der_get_uint32" 'function)) :int
  (i :pointer)
  (x :pointer))

(cffi:defcfun ("nettle_base16_encode_single" #.(lispify "nettle_base16_encode_single" 'function)) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_base16_encode_update" #.(lispify "nettle_base16_encode_update" 'function)) :void
  (dst :pointer)
  (length :unsigned-int)
  (src :pointer))

(cffi:defcstruct #.(lispify "base16_decode_ctx" 'classname)
	(#.(lispify "word" 'slotname) :unsigned-int)
	(#.(lispify "bits" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_base16_decode_init" #.(lispify "nettle_base16_decode_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_base16_decode_single" #.(lispify "nettle_base16_decode_single" 'function)) :int
  (ctx :pointer)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_base16_decode_update" #.(lispify "nettle_base16_decode_update" 'function)) :int
  (ctx :pointer)
  (dst_length :pointer)
  (dst :pointer)
  (src_length :unsigned-int)
  (src :pointer))

(cffi:defcfun ("nettle_base16_decode_final" #.(lispify "nettle_base16_decode_final" 'function)) :int
  (ctx :pointer))

(cl:defconstant #.(lispify "BASE64_BINARY_BLOCK_SIZE" 'constant) 3)

(cl:defconstant #.(lispify "BASE64_TEXT_BLOCK_SIZE" 'constant) 4)

(cl:defconstant #.(lispify "BASE64_ENCODE_FINAL_LENGTH" 'constant) 3)

(cffi:defcstruct #.(lispify "base64_encode_ctx" 'classname)
	(#.(lispify "word" 'slotname) :unsigned-int)
	(#.(lispify "bits" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_base64_encode_init" #.(lispify "nettle_base64_encode_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_base64_encode_single" #.(lispify "nettle_base64_encode_single" 'function)) :unsigned-int
  (ctx :pointer)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_base64_encode_update" #.(lispify "nettle_base64_encode_update" 'function)) :unsigned-int
  (ctx :pointer)
  (dst :pointer)
  (length :unsigned-int)
  (src :pointer))

(cffi:defcfun ("nettle_base64_encode_final" #.(lispify "nettle_base64_encode_final" 'function)) :unsigned-int
  (ctx :pointer)
  (dst :pointer))

(cffi:defcfun ("nettle_base64_encode_raw" #.(lispify "nettle_base64_encode_raw" 'function)) :void
  (dst :pointer)
  (length :unsigned-int)
  (src :pointer))

(cffi:defcfun ("nettle_base64_encode_group" #.(lispify "nettle_base64_encode_group" 'function)) :void
  (dst :pointer)
  (group :pointer))

(cffi:defcstruct #.(lispify "base64_decode_ctx" 'classname)
	(#.(lispify "word" 'slotname) :unsigned-int)
	(#.(lispify "bits" 'slotname) :unsigned-int)
	(#.(lispify "padding" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_base64_decode_init" #.(lispify "nettle_base64_decode_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_base64_decode_single" #.(lispify "nettle_base64_decode_single" 'function)) :int
  (ctx :pointer)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_base64_decode_update" #.(lispify "nettle_base64_decode_update" 'function)) :int
  (ctx :pointer)
  (dst_length :pointer)
  (dst :pointer)
  (src_length :unsigned-int)
  (src :pointer))

(cffi:defcfun ("nettle_base64_decode_final" #.(lispify "nettle_base64_decode_final" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("nettle_mpz_sizeinbase_256_s" #.(lispify "nettle_mpz_sizeinbase_256_s" 'function)) :unsigned-int
  (x :pointer))

(cffi:defcfun ("nettle_mpz_sizeinbase_256_u" #.(lispify "nettle_mpz_sizeinbase_256_u" 'function)) :unsigned-int
  (x :pointer))

(cffi:defcfun ("nettle_mpz_get_str_256" #.(lispify "nettle_mpz_get_str_256" 'function)) :void
  (length :unsigned-int)
  (s :pointer)
  (x :pointer))

(cffi:defcfun ("nettle_mpz_set_str_256_s" #.(lispify "nettle_mpz_set_str_256_s" 'function)) :void
  (x :pointer)
  (length :unsigned-int)
  (s :pointer))

(cffi:defcfun ("nettle_mpz_init_set_str_256_s" #.(lispify "nettle_mpz_init_set_str_256_s" 'function)) :void
  (x :pointer)
  (length :unsigned-int)
  (s :pointer))

(cffi:defcfun ("nettle_mpz_set_str_256_u" #.(lispify "nettle_mpz_set_str_256_u" 'function)) :void
  (x :pointer)
  (length :unsigned-int)
  (s :pointer))

(cffi:defcfun ("nettle_mpz_init_set_str_256_u" #.(lispify "nettle_mpz_init_set_str_256_u" 'function)) :void
  (x :pointer)
  (length :unsigned-int)
  (s :pointer))

(cffi:defcfun ("nettle_mpz_random_size" #.(lispify "nettle_mpz_random_size" 'function)) :void
  (x :pointer)
  (ctx :pointer)
  (random :pointer)
  (bits :unsigned-int))

(cffi:defcfun ("nettle_mpz_random" #.(lispify "nettle_mpz_random" 'function)) :void
  (x :pointer)
  (ctx :pointer)
  (random :pointer)
  (n :pointer))

(cffi:defcfun ("nettle_next_prime" #.(lispify "nettle_next_prime" 'function)) :void
  (p :pointer)
  (n :pointer)
  (count :unsigned-int)
  (prime_limit :unsigned-int)
  (progress_ctx :pointer)
  (progress :pointer))

(cffi:defcfun ("nettle_random_prime" #.(lispify "nettle_random_prime" 'function)) :void
  (p :pointer)
  (bits :unsigned-int)
  (top_bits_set :int)
  (ctx :pointer)
  (random :pointer)
  (progress_ctx :pointer)
  (progress :pointer))

(cffi:defcfun ("_nettle_generate_pocklington_prime" #.(lispify "_nettle_generate_pocklington_prime" 'function)) :void
  (p :pointer)
  (r :pointer)
  (bits :unsigned-int)
  (top_bits_set :int)
  (ctx :pointer)
  (random :pointer)
  (p0 :pointer)
  (q :pointer)
  (p0q :pointer))

(cffi:defcfun ("nettle_mpz_set_sexp" #.(lispify "nettle_mpz_set_sexp" 'function)) :int
  (x :pointer)
  (limit :unsigned-int)
  (i :pointer))

(cffi:defcfun ("nettle_asn1_der_get_bignum" #.(lispify "nettle_asn1_der_get_bignum" 'function)) :int
  (iterator :pointer)
  (x :pointer)
  (max_bits :unsigned-int))

(cl:defconstant #.(lispify "BLOWFISH_BLOCK_SIZE" 'constant) 8)

(cl:defconstant #.(lispify "BLOWFISH_MIN_KEY_SIZE" 'constant) 8)

(cl:defconstant #.(lispify "BLOWFISH_MAX_KEY_SIZE" 'constant) 56)

(cl:defconstant #.(lispify "BLOWFISH_KEY_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "_BLOWFISH_ROUNDS" 'constant) 16)

(cffi:defcstruct #.(lispify "blowfish_ctx" 'classname)
	(#.(lispify "s" 'slotname) :pointer)
	(#.(lispify "p" 'slotname) :pointer))

(cffi:defcfun ("nettle_blowfish_set_key" #.(lispify "nettle_blowfish_set_key" 'function)) :int
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_blowfish_encrypt" #.(lispify "nettle_blowfish_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_blowfish_decrypt" #.(lispify "nettle_blowfish_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcstruct #.(lispify "nettle_buffer" 'classname)
	(#.(lispify "contents" 'slotname) :pointer)
	(#.(lispify "alloc" 'slotname) :unsigned-int)
	(#.(lispify "realloc_ctx" 'slotname) :pointer)
	(#.(lispify "realloc" 'slotname) :pointer)
	(#.(lispify "size" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_buffer_init" #.(lispify "nettle_buffer_init" 'function)) :void
  (buffer :pointer))

(cffi:defcfun ("nettle_buffer_init_realloc" #.(lispify "nettle_buffer_init_realloc" 'function)) :void
  (buffer :pointer)
  (realloc_ctx :pointer)
  (realloc :pointer))

(cffi:defcfun ("nettle_buffer_init_size" #.(lispify "nettle_buffer_init_size" 'function)) :void
  (buffer :pointer)
  (length :unsigned-int)
  (space :pointer))

(cffi:defcfun ("nettle_buffer_clear" #.(lispify "nettle_buffer_clear" 'function)) :void
  (buffer :pointer))

(cffi:defcfun ("nettle_buffer_reset" #.(lispify "nettle_buffer_reset" 'function)) :void
  (buffer :pointer))

(cffi:defcfun ("nettle_buffer_grow" #.(lispify "nettle_buffer_grow" 'function)) :int
  (buffer :pointer)
  (length :unsigned-int))

(cffi:defcfun ("nettle_buffer_write" #.(lispify "nettle_buffer_write" 'function)) :int
  (buffer :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_buffer_space" #.(lispify "nettle_buffer_space" 'function)) :pointer
  (buffer :pointer)
  (length :unsigned-int))

(cffi:defcfun ("nettle_buffer_copy" #.(lispify "nettle_buffer_copy" 'function)) :int
  (dst :pointer)
  (src :pointer))

(cl:defconstant #.(lispify "CAMELLIA_BLOCK_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "CAMELLIA_MIN_KEY_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "CAMELLIA_MAX_KEY_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "CAMELLIA_KEY_SIZE" 'constant) 32)

(cffi:defcstruct #.(lispify "camellia_ctx" 'classname)
	(#.(lispify "nkeys" 'slotname) :unsigned-int)
	(#.(lispify "keys" 'slotname) :pointer))

(cffi:defcfun ("nettle_camellia_set_encrypt_key" #.(lispify "nettle_camellia_set_encrypt_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_camellia_set_decrypt_key" #.(lispify "nettle_camellia_set_decrypt_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_camellia_invert_key" #.(lispify "nettle_camellia_invert_key" 'function)) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_camellia_crypt" #.(lispify "nettle_camellia_crypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cl:defconstant #.(lispify "CAST128_BLOCK_SIZE" 'constant) 8)

(cl:defconstant #.(lispify "CAST128_MIN_KEY_SIZE" 'constant) 5)

(cl:defconstant #.(lispify "CAST128_MAX_KEY_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "CAST128_KEY_SIZE" 'constant) 16)

(cffi:defcstruct #.(lispify "cast128_ctx" 'classname)
	(#.(lispify "keys" 'slotname) :pointer)
	(#.(lispify "rounds" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_cast128_set_key" #.(lispify "nettle_cast128_set_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_cast128_encrypt" #.(lispify "nettle_cast128_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_cast128_decrypt" #.(lispify "nettle_cast128_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_cbc_encrypt" #.(lispify "nettle_cbc_encrypt" 'function)) :void
  (ctx :pointer)
  (f :pointer)
  (block_size :unsigned-int)
  (iv :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_cbc_decrypt" #.(lispify "nettle_cbc_decrypt" 'function)) :void
  (ctx :pointer)
  (f :pointer)
  (block_size :unsigned-int)
  (iv :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_ctr_crypt" #.(lispify "nettle_ctr_crypt" 'function)) :void
  (ctx :pointer)
  (f :pointer)
  (block_size :unsigned-int)
  (ctr :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cl:defconstant #.(lispify "DES_KEY_SIZE" 'constant) 8)

(cl:defconstant #.(lispify "DES_BLOCK_SIZE" 'constant) 8)

(cl:defconstant #.(lispify "_DES_KEY_LENGTH" 'constant) 32)

(cffi:defcstruct #.(lispify "des_ctx" 'classname)
	(#.(lispify "key" 'slotname) :pointer))

(cffi:defcfun ("nettle_des_set_key" #.(lispify "nettle_des_set_key" 'function)) :int
  (ctx :pointer)
  (key :pointer))

(cffi:defcfun ("nettle_des_encrypt" #.(lispify "nettle_des_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_des_decrypt" #.(lispify "nettle_des_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_des_check_parity" #.(lispify "nettle_des_check_parity" 'function)) :int
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_des_fix_parity" #.(lispify "nettle_des_fix_parity" 'function)) :void
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cl:defconstant #.(lispify "DES3_KEY_SIZE" 'constant) 24)

(cl:defconstant #.(lispify "DES3_BLOCK_SIZE" 'constant) 8)

(cffi:defcstruct #.(lispify "des3_ctx" 'classname)
	(#.(lispify "des" 'slotname) :pointer))

(cffi:defcfun ("nettle_des3_set_key" #.(lispify "nettle_des3_set_key" 'function)) :int
  (ctx :pointer)
  (key :pointer))

(cffi:defcfun ("nettle_des3_encrypt" #.(lispify "nettle_des3_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_des3_decrypt" #.(lispify "nettle_des3_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(defanonenum 
	(#.(lispify "DES_DECRYPT" 'enumvalue) #.0)
	(#.(lispify "DES_ENCRYPT" 'enumvalue) #.1))

(cffi:defcvar ("nettle_openssl_des_check_key" #.(lispify "nettle_openssl_des_check_key" 'variable))
 :int)

(cffi:defcfun ("nettle_openssl_des_ecb3_encrypt" #.(lispify "nettle_openssl_des_ecb3_encrypt" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (k3 :pointer)
  (enc :int))

(cffi:defcfun ("nettle_openssl_des_cbc_cksum" #.(lispify "nettle_openssl_des_cbc_cksum" 'function)) :pointer
  (src :pointer)
  (dst :pointer)
  (length :long)
  (ctx :pointer)
  (iv :pointer))

(cffi:defcfun ("nettle_openssl_des_cbc_encrypt" #.(lispify "nettle_openssl_des_cbc_encrypt" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (length :long)
  (ctx :pointer)
  (iv :pointer)
  (enc :int))

(cffi:defcfun ("nettle_openssl_des_ncbc_encrypt" #.(lispify "nettle_openssl_des_ncbc_encrypt" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (length :long)
  (ctx :pointer)
  (iv :pointer)
  (enc :int))

(cffi:defcfun ("nettle_openssl_des_ecb_encrypt" #.(lispify "nettle_openssl_des_ecb_encrypt" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (ctx :pointer)
  (enc :int))

(cffi:defcfun ("nettle_openssl_des_ede3_cbc_encrypt" #.(lispify "nettle_openssl_des_ede3_cbc_encrypt" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (length :long)
  (k1 :pointer)
  (k2 :pointer)
  (k3 :pointer)
  (iv :pointer)
  (enc :int))

(cffi:defcfun ("nettle_openssl_des_set_odd_parity" #.(lispify "nettle_openssl_des_set_odd_parity" 'function)) :int
  (key :pointer))

(cffi:defcfun ("nettle_openssl_des_key_sched" #.(lispify "nettle_openssl_des_key_sched" 'function)) :int
  (key :pointer)
  (ctx :pointer))

(cffi:defcfun ("nettle_openssl_des_is_weak_key" #.(lispify "nettle_openssl_des_is_weak_key" 'function)) :int
  (key :pointer))

(cl:defconstant #.(lispify "DSA_SHA1_MIN_P_BITS" 'constant) 512)

(cl:defconstant #.(lispify "DSA_SHA1_Q_OCTETS" 'constant) 20)

(cl:defconstant #.(lispify "DSA_SHA1_Q_BITS" 'constant) 160)

(cl:defconstant #.(lispify "DSA_SHA256_MIN_P_BITS" 'constant) 1024)

(cl:defconstant #.(lispify "DSA_SHA256_Q_OCTETS" 'constant) 32)

(cl:defconstant #.(lispify "DSA_SHA256_Q_BITS" 'constant) 256)

(cffi:defcstruct #.(lispify "dsa_public_key" 'classname)
	(#.(lispify "p" 'slotname) :pointer)
	(#.(lispify "q" 'slotname) :pointer)
	(#.(lispify "g" 'slotname) :pointer)
	(#.(lispify "y" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "dsa_private_key" 'classname)
	(#.(lispify "x" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "dsa_signature" 'classname)
	(#.(lispify "r" 'slotname) :pointer)
	(#.(lispify "s" 'slotname) :pointer))

(cffi:defcfun ("nettle_dsa_public_key_init" #.(lispify "nettle_dsa_public_key_init" 'function)) :void
  (key :pointer))

(cffi:defcfun ("nettle_dsa_public_key_clear" #.(lispify "nettle_dsa_public_key_clear" 'function)) :void
  (key :pointer))

(cffi:defcfun ("nettle_dsa_private_key_init" #.(lispify "nettle_dsa_private_key_init" 'function)) :void
  (key :pointer))

(cffi:defcfun ("nettle_dsa_private_key_clear" #.(lispify "nettle_dsa_private_key_clear" 'function)) :void
  (key :pointer))

(cffi:defcfun ("nettle_dsa_signature_init" #.(lispify "nettle_dsa_signature_init" 'function)) :void
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_signature_clear" #.(lispify "nettle_dsa_signature_clear" 'function)) :void
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_sha1_sign" #.(lispify "nettle_dsa_sha1_sign" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_sha256_sign" #.(lispify "nettle_dsa_sha256_sign" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_sha1_verify" #.(lispify "nettle_dsa_sha1_verify" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_sha256_verify" #.(lispify "nettle_dsa_sha256_verify" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_sha1_sign_digest" #.(lispify "nettle_dsa_sha1_sign_digest" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_sha256_sign_digest" #.(lispify "nettle_dsa_sha256_sign_digest" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_sha1_verify_digest" #.(lispify "nettle_dsa_sha1_verify_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_sha256_verify_digest" #.(lispify "nettle_dsa_sha256_verify_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_dsa_generate_keypair" #.(lispify "nettle_dsa_generate_keypair" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (progress_ctx :pointer)
  (progress :pointer)
  (p_bits :unsigned-int)
  (q_bits :unsigned-int))

(cffi:defcfun ("nettle_dsa_keypair_to_sexp" #.(lispify "nettle_dsa_keypair_to_sexp" 'function)) :int
  (buffer :pointer)
  (algorithm_name :string)
  (pub :pointer)
  (priv :pointer))

(cffi:defcfun ("nettle_dsa_signature_from_sexp" #.(lispify "nettle_dsa_signature_from_sexp" 'function)) :int
  (rs :pointer)
  (i :pointer)
  (q_bits :unsigned-int))

(cffi:defcfun ("nettle_dsa_keypair_from_sexp_alist" #.(lispify "nettle_dsa_keypair_from_sexp_alist" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (p_max_bits :unsigned-int)
  (q_bits :unsigned-int)
  (i :pointer))

(cffi:defcfun ("nettle_dsa_sha1_keypair_from_sexp" #.(lispify "nettle_dsa_sha1_keypair_from_sexp" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (p_max_bits :unsigned-int)
  (length :unsigned-int)
  (expr :pointer))

(cffi:defcfun ("nettle_dsa_sha256_keypair_from_sexp" #.(lispify "nettle_dsa_sha256_keypair_from_sexp" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (p_max_bits :unsigned-int)
  (length :unsigned-int)
  (expr :pointer))

(cffi:defcfun ("nettle_dsa_params_from_der_iterator" #.(lispify "nettle_dsa_params_from_der_iterator" 'function)) :int
  (pub :pointer)
  (p_max_bits :unsigned-int)
  (i :pointer))

(cffi:defcfun ("nettle_dsa_public_key_from_der_iterator" #.(lispify "nettle_dsa_public_key_from_der_iterator" 'function)) :int
  (pub :pointer)
  (p_max_bits :unsigned-int)
  (i :pointer))

(cffi:defcfun ("nettle_dsa_openssl_private_key_from_der_iterator" #.(lispify "nettle_dsa_openssl_private_key_from_der_iterator" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (p_max_bits :unsigned-int)
  (i :pointer))

(cffi:defcfun ("nettle_openssl_provate_key_from_der" #.(lispify "nettle_openssl_provate_key_from_der" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (p_max_bits :unsigned-int)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("_nettle_dsa_sign" #.(lispify "_nettle_dsa_sign" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (digest_size :unsigned-int)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("_nettle_dsa_verify" #.(lispify "_nettle_dsa_verify" 'function)) :int
  (key :pointer)
  (digest_size :unsigned-int)
  (digest :pointer)
  (signature :pointer))

(cffi:defcstruct #.(lispify "ecc_point" 'classname)
	(#.(lispify "ecc" 'slotname) :pointer)
	(#.(lispify "p" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "ecc_scalar" 'classname)
	(#.(lispify "ecc" 'slotname) :pointer)
	(#.(lispify "p" 'slotname) :pointer))

(cffi:defcfun ("nettle_ecc_point_init" #.(lispify "nettle_ecc_point_init" 'function)) :void
  (p :pointer)
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_point_clear" #.(lispify "nettle_ecc_point_clear" 'function)) :void
  (p :pointer))

(cffi:defcfun ("nettle_ecc_point_set" #.(lispify "nettle_ecc_point_set" 'function)) :int
  (p :pointer)
  (x :pointer)
  (y :pointer))

(cffi:defcfun ("nettle_ecc_point_get" #.(lispify "nettle_ecc_point_get" 'function)) :void
  (p :pointer)
  (x :pointer)
  (y :pointer))

(cffi:defcfun ("nettle_ecc_scalar_init" #.(lispify "nettle_ecc_scalar_init" 'function)) :void
  (s :pointer)
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_scalar_clear" #.(lispify "nettle_ecc_scalar_clear" 'function)) :void
  (s :pointer))

(cffi:defcfun ("nettle_ecc_scalar_set" #.(lispify "nettle_ecc_scalar_set" 'function)) :int
  (s :pointer)
  (z :pointer))

(cffi:defcfun ("nettle_ecc_scalar_get" #.(lispify "nettle_ecc_scalar_get" 'function)) :void
  (s :pointer)
  (z :pointer))

(cffi:defcfun ("nettle_ecc_scalar_random" #.(lispify "nettle_ecc_scalar_random" 'function)) :void
  (s :pointer)
  (random_ctx :pointer)
  (random :pointer))

(cffi:defcfun ("nettle_ecc_point_mul" #.(lispify "nettle_ecc_point_mul" 'function)) :void
  (r :pointer)
  (n :pointer)
  (p :pointer))

(cffi:defcfun ("nettle_ecc_point_mul_g" #.(lispify "nettle_ecc_point_mul_g" 'function)) :void
  (r :pointer)
  (n :pointer))

(cffi:defcfun ("nettle_ecc_size" #.(lispify "nettle_ecc_size" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_size_a" #.(lispify "nettle_ecc_size_a" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_size_j" #.(lispify "nettle_ecc_size_j" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_a_to_a_itch" #.(lispify "nettle_ecc_a_to_a_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_a_to_a" #.(lispify "nettle_ecc_a_to_a" 'function)) :void
  (ecc :pointer)
  (r :pointer)
  (p :pointer)
  (scratch :pointer))

(cffi:defcfun ("nettle_ecc_a_to_j" #.(lispify "nettle_ecc_a_to_j" 'function)) :void
  (ecc :pointer)
  (initial :int)
  (r :pointer)
  (p :pointer))

(cffi:defcfun ("nettle_ecc_j_to_a_itch" #.(lispify "nettle_ecc_j_to_a_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_j_to_a" #.(lispify "nettle_ecc_j_to_a" 'function)) :void
  (ecc :pointer)
  (flags :int)
  (r :pointer)
  (p :pointer)
  (scratch :pointer))

(cffi:defcfun ("nettle_ecc_dup_ja_itch" #.(lispify "nettle_ecc_dup_ja_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_dup_ja" #.(lispify "nettle_ecc_dup_ja" 'function)) :void
  (ecc :pointer)
  (r :pointer)
  (p :pointer)
  (scratch :pointer))

(cffi:defcfun ("nettle_ecc_dup_jj_itch" #.(lispify "nettle_ecc_dup_jj_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_dup_jj" #.(lispify "nettle_ecc_dup_jj" 'function)) :void
  (ecc :pointer)
  (r :pointer)
  (p :pointer)
  (scratch :pointer))

(cffi:defcfun ("nettle_ecc_add_jja_itch" #.(lispify "nettle_ecc_add_jja_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_add_jja" #.(lispify "nettle_ecc_add_jja" 'function)) :void
  (ecc :pointer)
  (r :pointer)
  (p :pointer)
  (q :pointer)
  (scratch :pointer))

(cffi:defcfun ("nettle_ecc_add_jjj_itch" #.(lispify "nettle_ecc_add_jjj_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_add_jjj" #.(lispify "nettle_ecc_add_jjj" 'function)) :void
  (ecc :pointer)
  (r :pointer)
  (p :pointer)
  (q :pointer)
  (scratch :pointer))

(cffi:defcfun ("nettle_ecc_mul_g_itch" #.(lispify "nettle_ecc_mul_g_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_mul_g" #.(lispify "nettle_ecc_mul_g" 'function)) :void
  (ecc :pointer)
  (r :pointer)
  (np :pointer)
  (scratch :pointer))

(cffi:defcfun ("nettle_ecc_mul_a_itch" #.(lispify "nettle_ecc_mul_a_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_mul_a" #.(lispify "nettle_ecc_mul_a" 'function)) :void
  (ecc :pointer)
  (initial :int)
  (r :pointer)
  (np :pointer)
  (p :pointer)
  (scratch :pointer))

(cffi:defcvar ("nettle_secp_192r1" #.(lispify "nettle_secp_192r1" 'variable))
 :pointer)

(cffi:defcvar ("nettle_secp_224r1" #.(lispify "nettle_secp_224r1" 'variable))
 :pointer)

(cffi:defcvar ("nettle_secp_256r1" #.(lispify "nettle_secp_256r1" 'variable))
 :pointer)

(cffi:defcvar ("nettle_secp_384r1" #.(lispify "nettle_secp_384r1" 'variable))
 :pointer)

(cffi:defcvar ("nettle_secp_521r1" #.(lispify "nettle_secp_521r1" 'variable))
 :pointer)

(cffi:defcfun ("nettle_ecdsa_sign" #.(lispify "nettle_ecdsa_sign" 'function)) :void
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (digest_length :unsigned-int)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_ecdsa_verify" #.(lispify "nettle_ecdsa_verify" 'function)) :int
  (pub :pointer)
  (length :unsigned-int)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_ecdsa_generate_keypair" #.(lispify "nettle_ecdsa_generate_keypair" 'function)) :void
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer))

(cffi:defcfun ("nettle_ecc_ecdsa_sign_itch" #.(lispify "nettle_ecc_ecdsa_sign_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_ecdsa_sign" #.(lispify "nettle_ecc_ecdsa_sign" 'function)) :void
  (ecc :pointer)
  (zp :pointer)
  (kp :pointer)
  (length :unsigned-int)
  (digest :pointer)
  (rp :pointer)
  (sp :pointer)
  (scratch :pointer))

(cffi:defcfun ("nettle_ecc_ecdsa_verify_itch" #.(lispify "nettle_ecc_ecdsa_verify_itch" 'function)) :pointer
  (ecc :pointer))

(cffi:defcfun ("nettle_ecc_ecdsa_verify" #.(lispify "nettle_ecc_ecdsa_verify" 'function)) :int
  (ecc :pointer)
  (pp :pointer)
  (length :unsigned-int)
  (digest :pointer)
  (rp :pointer)
  (sp :pointer)
  (scratch :pointer))

(cl:defconstant #.(lispify "GCM_BLOCK_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "GCM_IV_SIZE" 'constant) (cl:- 16 4))

(cl:defconstant #.(lispify "GCM_TABLE_BITS" 'constant) 8)

(cffi:defcunion #.(lispify "gcm_block" 'classname)
	(#.(lispify "b" 'slotname) :pointer)
	(#.(lispify "w" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "gcm_key" 'classname)
	(#.(lispify "h" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "gcm_ctx" 'classname)
	(#.(lispify "iv" 'slotname) #.(lispify "gcm_block" 'classname))
	(#.(lispify "ctr" 'slotname) #.(lispify "gcm_block" 'classname))
	(#.(lispify "x" 'slotname) #.(lispify "gcm_block" 'classname))
	(#.(lispify "auth_size" 'slotname) :pointer)
	(#.(lispify "data_size" 'slotname) :pointer))

(cffi:defcfun ("nettle_gcm_set_key" #.(lispify "nettle_gcm_set_key" 'function)) :void
  (key :pointer)
  (cipher :pointer)
  (f :pointer))

(cffi:defcfun ("nettle_gcm_set_iv" #.(lispify "nettle_gcm_set_iv" 'function)) :void
  (ctx :pointer)
  (key :pointer)
  (length :unsigned-int)
  (iv :pointer))

(cffi:defcfun ("nettle_gcm_update" #.(lispify "nettle_gcm_update" 'function)) :void
  (ctx :pointer)
  (key :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_gcm_encrypt" #.(lispify "nettle_gcm_encrypt" 'function)) :void
  (ctx :pointer)
  (key :pointer)
  (cipher :pointer)
  (f :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_gcm_decrypt" #.(lispify "nettle_gcm_decrypt" 'function)) :void
  (ctx :pointer)
  (key :pointer)
  (cipher :pointer)
  (f :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_gcm_digest" #.(lispify "nettle_gcm_digest" 'function)) :void
  (ctx :pointer)
  (key :pointer)
  (cipher :pointer)
  (f :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "gcm_aes_ctx" 'classname)
	(#.(lispify "cipher" 'slotname) #.(lispify "aes_ctx" 'classname))
	(#.(lispify "key" 'slotname) #.(lispify "gcm_key" 'classname))
	(#.(lispify "gcm" 'slotname) #.(lispify "gcm_ctx" 'classname)))

(cffi:defcfun ("nettle_gcm_aes_set_key" #.(lispify "nettle_gcm_aes_set_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_gcm_aes_set_iv" #.(lispify "nettle_gcm_aes_set_iv" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (iv :pointer))

(cffi:defcfun ("nettle_gcm_aes_update" #.(lispify "nettle_gcm_aes_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_gcm_aes_encrypt" #.(lispify "nettle_gcm_aes_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_gcm_aes_decrypt" #.(lispify "nettle_gcm_aes_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_gcm_aes_digest" #.(lispify "nettle_gcm_aes_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cl:defconstant #.(lispify "GOSTHASH94_DATA_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "GOSTHASH94_DIGEST_SIZE" 'constant) 32)

(cffi:defcstruct #.(lispify "gosthash94_ctx" 'classname)
	(#.(lispify "hash" 'slotname) :pointer)
	(#.(lispify "sum" 'slotname) :pointer)
	(#.(lispify "message" 'slotname) :pointer)
	(#.(lispify "length" 'slotname) :pointer))

(cffi:defcfun ("nettle_gosthash94_init" #.(lispify "nettle_gosthash94_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_gosthash94_update" #.(lispify "nettle_gosthash94_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (msg :pointer))

(cffi:defcfun ("nettle_gosthash94_digest" #.(lispify "nettle_gosthash94_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (result :pointer))

(cffi:defcfun ("nettle_hmac_set_key" #.(lispify "nettle_hmac_set_key" 'function)) :void
  (outer :pointer)
  (inner :pointer)
  (state :pointer)
  (hash :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_hmac_update" #.(lispify "nettle_hmac_update" 'function)) :void
  (state :pointer)
  (hash :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_hmac_digest" #.(lispify "nettle_hmac_digest" 'function)) :void
  (outer :pointer)
  (inner :pointer)
  (state :pointer)
  (hash :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "hmac_md5_ctx" 'classname)
	(#.(lispify "outer" 'slotname) :pointer)
	(#.(lispify "inner" 'slotname) :pointer)
	(#.(lispify "state" 'slotname) :pointer))

(cffi:defcfun ("nettle_hmac_md5_set_key" #.(lispify "nettle_hmac_md5_set_key" 'function)) :void
  (ctx :pointer)
  (key_length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_hmac_md5_update" #.(lispify "nettle_hmac_md5_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_hmac_md5_digest" #.(lispify "nettle_hmac_md5_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "hmac_ripemd160_ctx" 'classname)
	(#.(lispify "outer" 'slotname) :pointer)
	(#.(lispify "inner" 'slotname) :pointer)
	(#.(lispify "state" 'slotname) :pointer))

(cffi:defcfun ("nettle_hmac_ripemd160_set_key" #.(lispify "nettle_hmac_ripemd160_set_key" 'function)) :void
  (ctx :pointer)
  (key_length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_hmac_ripemd160_update" #.(lispify "nettle_hmac_ripemd160_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_hmac_ripemd160_digest" #.(lispify "nettle_hmac_ripemd160_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "hmac_sha1_ctx" 'classname)
	(#.(lispify "outer" 'slotname) :pointer)
	(#.(lispify "inner" 'slotname) :pointer)
	(#.(lispify "state" 'slotname) :pointer))

(cffi:defcfun ("nettle_hmac_sha1_set_key" #.(lispify "nettle_hmac_sha1_set_key" 'function)) :void
  (ctx :pointer)
  (key_length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_hmac_sha1_update" #.(lispify "nettle_hmac_sha1_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_hmac_sha1_digest" #.(lispify "nettle_hmac_sha1_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "hmac_sha256_ctx" 'classname)
	(#.(lispify "outer" 'slotname) :pointer)
	(#.(lispify "inner" 'slotname) :pointer)
	(#.(lispify "state" 'slotname) :pointer))

(cffi:defcfun ("nettle_hmac_sha256_set_key" #.(lispify "nettle_hmac_sha256_set_key" 'function)) :void
  (ctx :pointer)
  (key_length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_hmac_sha256_update" #.(lispify "nettle_hmac_sha256_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_hmac_sha256_digest" #.(lispify "nettle_hmac_sha256_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_hmac_sha224_set_key" #.(lispify "nettle_hmac_sha224_set_key" 'function)) :void
  (ctx :pointer)
  (key_length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_hmac_sha224_digest" #.(lispify "nettle_hmac_sha224_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "hmac_sha512_ctx" 'classname)
	(#.(lispify "outer" 'slotname) :pointer)
	(#.(lispify "inner" 'slotname) :pointer)
	(#.(lispify "state" 'slotname) :pointer))

(cffi:defcfun ("nettle_hmac_sha512_set_key" #.(lispify "nettle_hmac_sha512_set_key" 'function)) :void
  (ctx :pointer)
  (key_length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_hmac_sha512_update" #.(lispify "nettle_hmac_sha512_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_hmac_sha512_digest" #.(lispify "nettle_hmac_sha512_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_hmac_sha384_set_key" #.(lispify "nettle_hmac_sha384_set_key" 'function)) :void
  (ctx :pointer)
  (key_length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_hmac_sha384_digest" #.(lispify "nettle_hmac_sha384_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cl:defconstant #.(lispify "_KNUTH_LFIB_KK" 'constant) 100)

(cffi:defcstruct #.(lispify "knuth_lfib_ctx" 'classname)
	(#.(lispify "x" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_knuth_lfib_init" #.(lispify "nettle_knuth_lfib_init" 'function)) :void
  (ctx :pointer)
  (seed :pointer))

(cffi:defcfun ("nettle_knuth_lfib_get" #.(lispify "nettle_knuth_lfib_get" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("nettle_knuth_lfib_get_array" #.(lispify "nettle_knuth_lfib_get_array" 'function)) :void
  (ctx :pointer)
  (n :unsigned-int)
  (a :pointer))

(cffi:defcfun ("nettle_knuth_lfib_random" #.(lispify "nettle_knuth_lfib_random" 'function)) :void
  (ctx :pointer)
  (n :unsigned-int)
  (dst :pointer))

(cl:defconstant #.(lispify "MD2_DIGEST_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "MD2_DATA_SIZE" 'constant) 16)

(cffi:defcstruct #.(lispify "md2_ctx" 'classname)
	(#.(lispify "C" 'slotname) :pointer)
	(#.(lispify "X" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_md2_init" #.(lispify "nettle_md2_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_md2_update" #.(lispify "nettle_md2_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_md2_digest" #.(lispify "nettle_md2_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cl:defconstant #.(lispify "MD4_DIGEST_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "MD4_DATA_SIZE" 'constant) 64)

(cl:defconstant #.(lispify "_MD4_DIGEST_LENGTH" 'constant) 4)

(cffi:defcstruct #.(lispify "md4_ctx" 'classname)
	(#.(lispify "state" 'slotname) :pointer)
	(#.(lispify "count_low" 'slotname) :pointer)
	(#.(lispify "count_high" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_md4_init" #.(lispify "nettle_md4_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_md4_update" #.(lispify "nettle_md4_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_md4_digest" #.(lispify "nettle_md4_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cl:defconstant #.(lispify "MD5_DIGEST_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "MD5_DATA_SIZE" 'constant) 64)

(cl:defconstant #.(lispify "_MD5_DIGEST_LENGTH" 'constant) 4)

(cffi:defcstruct #.(lispify "md5_ctx" 'classname)
	(#.(lispify "state" 'slotname) :pointer)
	(#.(lispify "count_low" 'slotname) :pointer)
	(#.(lispify "count_high" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_md5_init" #.(lispify "nettle_md5_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_md5_update" #.(lispify "nettle_md5_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_md5_digest" #.(lispify "nettle_md5_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("_nettle_md5_compress" #.(lispify "_nettle_md5_compress" 'function)) :void
  (state :pointer)
  (data :pointer))

(cffi:defcfun ("nettle_MD5Init" #.(lispify "nettle_MD5Init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_MD5Update" #.(lispify "nettle_MD5Update" 'function)) :void
  (ctx :pointer)
  (data :pointer)
  (length :unsigned-int))

(cffi:defcfun ("nettle_MD5Final" #.(lispify "nettle_MD5Final" 'function)) :void
  (out :pointer)
  (ctx :pointer))

(cffi:defcfun ("memxor" #.(lispify "memxor" 'function)) :pointer
  (dst :pointer)
  (src :pointer)
  (n :pointer))

(cffi:defcfun ("memxor3" #.(lispify "memxor3" 'function)) :pointer
  (dst :pointer)
  (a :pointer)
  (b :pointer)
  (n :pointer))

(cffi:defcstruct #.(lispify "nettle_cipher" 'classname)
	(#.(lispify "name" 'slotname) :string)
	(#.(lispify "context_size" 'slotname) :unsigned-int)
	(#.(lispify "block_size" 'slotname) :unsigned-int)
	(#.(lispify "key_size" 'slotname) :unsigned-int)
	(#.(lispify "set_encrypt_key" 'slotname) :pointer)
	(#.(lispify "set_decrypt_key" 'slotname) :pointer)
	(#.(lispify "encrypt" 'slotname) :pointer)
	(#.(lispify "decrypt" 'slotname) :pointer))

(cffi:defcvar ("nettle_ciphers" #.(lispify "nettle_ciphers" 'variable))
 :pointer)

(cffi:defcvar ("nettle_aes128" #.(lispify "nettle_aes128" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_aes192" #.(lispify "nettle_aes192" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_aes256" #.(lispify "nettle_aes256" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_arcfour128" #.(lispify "nettle_arcfour128" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_camellia128" #.(lispify "nettle_camellia128" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_camellia192" #.(lispify "nettle_camellia192" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_camellia256" #.(lispify "nettle_camellia256" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_cast128" #.(lispify "nettle_cast128" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_serpent128" #.(lispify "nettle_serpent128" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_serpent192" #.(lispify "nettle_serpent192" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_serpent256" #.(lispify "nettle_serpent256" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_twofish128" #.(lispify "nettle_twofish128" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_twofish192" #.(lispify "nettle_twofish192" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_twofish256" #.(lispify "nettle_twofish256" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_arctwo40" #.(lispify "nettle_arctwo40" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_arctwo64" #.(lispify "nettle_arctwo64" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_arctwo128" #.(lispify "nettle_arctwo128" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcvar ("nettle_arctwo_gutmann128" #.(lispify "nettle_arctwo_gutmann128" 'variable))
 #.(lispify "nettle_cipher" 'classname))

(cffi:defcstruct #.(lispify "nettle_hash" 'classname)
	(#.(lispify "name" 'slotname) :string)
	(#.(lispify "context_size" 'slotname) :unsigned-int)
	(#.(lispify "digest_size" 'slotname) :unsigned-int)
	(#.(lispify "block_size" 'slotname) :unsigned-int)
	(#.(lispify "init" 'slotname) :pointer)
	(#.(lispify "update" 'slotname) :pointer)
	(#.(lispify "digest" 'slotname) :pointer))

(cffi:defcvar ("nettle_hashes" #.(lispify "nettle_hashes" 'variable))
 :pointer)

(cffi:defcvar ("nettle_md2" #.(lispify "nettle_md2" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_md4" #.(lispify "nettle_md4" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_md5" #.(lispify "nettle_md5" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_gosthash94" #.(lispify "nettle_gosthash94" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_ripemd160" #.(lispify "nettle_ripemd160" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha1" #.(lispify "nettle_sha1" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha224" #.(lispify "nettle_sha224" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha256" #.(lispify "nettle_sha256" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha384" #.(lispify "nettle_sha384" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha512" #.(lispify "nettle_sha512" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha3_224" #.(lispify "nettle_sha3_224" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha3_256" #.(lispify "nettle_sha3_256" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha3_384" #.(lispify "nettle_sha3_384" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcvar ("nettle_sha3_512" #.(lispify "nettle_sha3_512" 'variable))
 #.(lispify "nettle_hash" 'classname))

(cffi:defcstruct #.(lispify "nettle_armor" 'classname)
	(#.(lispify "name" 'slotname) :string)
	(#.(lispify "encode_context_size" 'slotname) :unsigned-int)
	(#.(lispify "decode_context_size" 'slotname) :unsigned-int)
	(#.(lispify "encode_final_length" 'slotname) :unsigned-int)
	(#.(lispify "encode_init" 'slotname) :pointer)
	(#.(lispify "encode_length" 'slotname) :pointer)
	(#.(lispify "encode_update" 'slotname) :pointer)
	(#.(lispify "encode_final" 'slotname) :pointer)
	(#.(lispify "decode_init" 'slotname) :pointer)
	(#.(lispify "decode_length" 'slotname) :pointer)
	(#.(lispify "decode_update" 'slotname) :pointer)
	(#.(lispify "decode_final" 'slotname) :pointer))

(cffi:defcvar ("nettle_armors" #.(lispify "nettle_armors" 'variable))
 :pointer)

(cffi:defcvar ("nettle_base64" #.(lispify "nettle_base64" 'variable))
 #.(lispify "nettle_armor" 'classname))

(cffi:defcvar ("nettle_base16" #.(lispify "nettle_base16" 'variable))
 #.(lispify "nettle_armor" 'classname))

(cl:defconstant #.(lispify "__NETTLE_STDINT_H" 'constant) 1)

(cl:defconstant #.(lispify "_GENERATED_STDINT_H" 'constant) " ")

(cl:defconstant #.(lispify "_STDINT_HAVE_STDINT_H" 'constant) 1)

(cl:defconstant #.(lispify "_STDINT_HAVE_INT_FAST32_T" 'constant) 1)

(cffi:defcfun ("nettle_pbkdf2" #.(lispify "nettle_pbkdf2" 'function)) :void
  (mac_ctx :pointer)
  (update :pointer)
  (digest :pointer)
  (digest_size :unsigned-int)
  (iterations :unsigned-int)
  (salt_length :unsigned-int)
  (salt :pointer)
  (length :unsigned-int)
  (dst :pointer))

(cffi:defcfun ("nettle_pbkdf2_hmac_sha1" #.(lispify "nettle_pbkdf2_hmac_sha1" 'function)) :void
  (key_length :unsigned-int)
  (key :pointer)
  (iterations :unsigned-int)
  (salt_length :unsigned-int)
  (salt :pointer)
  (length :unsigned-int)
  (dst :pointer))

(cffi:defcfun ("nettle_pbkdf2_hmac_sha256" #.(lispify "nettle_pbkdf2_hmac_sha256" 'function)) :void
  (key_length :unsigned-int)
  (key :pointer)
  (iterations :unsigned-int)
  (salt_length :unsigned-int)
  (salt :pointer)
  (length :unsigned-int)
  (dst :pointer))

(cffi:defcfun ("nettle_pgp_put_uint32" #.(lispify "nettle_pgp_put_uint32" 'function)) :int
  (buffer :pointer)
  (i :pointer))

(cffi:defcfun ("nettle_pgp_put_uint16" #.(lispify "nettle_pgp_put_uint16" 'function)) :int
  (buffer :pointer)
  (i :unsigned-int))

(cffi:defcfun ("nettle_pgp_put_mpi" #.(lispify "nettle_pgp_put_mpi" 'function)) :int
  (buffer :pointer)
  (x :pointer))

(cffi:defcfun ("nettle_pgp_put_string" #.(lispify "nettle_pgp_put_string" 'function)) :int
  (buffer :pointer)
  (length :unsigned-int)
  (s :pointer))

(cffi:defcfun ("nettle_pgp_put_length" #.(lispify "nettle_pgp_put_length" 'function)) :int
  (buffer :pointer)
  (length :unsigned-int))

(cffi:defcfun ("nettle_pgp_put_header" #.(lispify "nettle_pgp_put_header" 'function)) :int
  (buffer :pointer)
  (tag :unsigned-int)
  (length :unsigned-int))

(cffi:defcfun ("nettle_pgp_put_header_length" #.(lispify "nettle_pgp_put_header_length" 'function)) :void
  (buffer :pointer)
  (start :unsigned-int)
  (field_size :unsigned-int))

(cffi:defcfun ("nettle_pgp_sub_packet_start" #.(lispify "nettle_pgp_sub_packet_start" 'function)) :unsigned-int
  (buffer :pointer))

(cffi:defcfun ("nettle_pgp_put_sub_packet" #.(lispify "nettle_pgp_put_sub_packet" 'function)) :int
  (buffer :pointer)
  (type :unsigned-int)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_pgp_sub_packet_end" #.(lispify "nettle_pgp_sub_packet_end" 'function)) :void
  (buffer :pointer)
  (start :unsigned-int))

(cffi:defcfun ("nettle_pgp_put_public_rsa_key" #.(lispify "nettle_pgp_put_public_rsa_key" 'function)) :int
  (arg0 :pointer)
  (key :pointer)
  (timestamp :pointer))

(cffi:defcfun ("nettle_pgp_put_rsa_sha1_signature" #.(lispify "nettle_pgp_put_rsa_sha1_signature" 'function)) :int
  (buffer :pointer)
  (key :pointer)
  (keyid :pointer)
  (type :unsigned-int)
  (hash :pointer))

(cffi:defcfun ("nettle_pgp_put_userid" #.(lispify "nettle_pgp_put_userid" 'function)) :int
  (buffer :pointer)
  (length :unsigned-int)
  (name :pointer))

(cffi:defcfun ("nettle_pgp_crc24" #.(lispify "nettle_pgp_crc24" 'function)) :pointer
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_pgp_armor" #.(lispify "nettle_pgp_armor" 'function)) :int
  (buffer :pointer)
  (tag :string)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcenum #.(lispify "pgp_lengths" 'enumname)
	(#.(lispify "PGP_LENGTH_ONE_OCTET" 'enumvalue :keyword) #.0)
	(#.(lispify "PGP_LENGTH_TWO_OCTETS" 'enumvalue :keyword) #.192)
	(#.(lispify "PGP_LENGTH_FOUR_OCTETS" 'enumvalue :keyword) #.8384))

(cffi:defcenum #.(lispify "pgp_public_key_algorithm" 'enumname)
	(#.(lispify "PGP_RSA" 'enumvalue :keyword) #.1)
	(#.(lispify "PGP_RSA_ENCRYPT" 'enumvalue :keyword) #.2)
	(#.(lispify "PGP_RSA_SIGN" 'enumvalue :keyword) #.3)
	(#.(lispify "PGP_EL_GAMAL_ENCRYPT" 'enumvalue :keyword) #.16)
	(#.(lispify "PGP_DSA" 'enumvalue :keyword) #.17)
	(#.(lispify "PGP_EL_GAMAL" 'enumvalue :keyword) #.20))

(cffi:defcenum #.(lispify "pgp_symmetric_algorithm" 'enumname)
	(#.(lispify "PGP_PLAINTEXT" 'enumvalue :keyword) #.0)
	(#.(lispify "PGP_IDEA" 'enumvalue :keyword) #.1)
	(#.(lispify "PGP_3DES" 'enumvalue :keyword) #.2)
	(#.(lispify "PGP_CAST5" 'enumvalue :keyword) #.3)
	(#.(lispify "PGP_BLOWFISH" 'enumvalue :keyword) #.4)
	(#.(lispify "PGP_SAFER_SK" 'enumvalue :keyword) #.5)
	(#.(lispify "PGP_AES128" 'enumvalue :keyword) #.7)
	(#.(lispify "PGP_AES192" 'enumvalue :keyword) #.8)
	(#.(lispify "PGP_AES256" 'enumvalue :keyword) #.9))

(cffi:defcenum #.(lispify "pgp_compression_algorithm" 'enumname)
	(#.(lispify "PGP_UNCOMPRESSED" 'enumvalue :keyword) #.0)
	(#.(lispify "PGP_ZIP" 'enumvalue :keyword) #.1)
	(#.(lispify "PGP_ZLIB" 'enumvalue :keyword) #.2))

(cffi:defcenum #.(lispify "pgp_hash_algorithm" 'enumname)
	(#.(lispify "PGP_MD5" 'enumvalue :keyword) #.1)
	(#.(lispify "PGP_SHA1" 'enumvalue :keyword) #.2)
	(#.(lispify "PGP_RIPEMD" 'enumvalue :keyword) #.3)
	(#.(lispify "PGP_MD2" 'enumvalue :keyword) #.5)
	(#.(lispify "PGP_TIGER192" 'enumvalue :keyword) #.6)
	(#.(lispify "PGP_HAVAL" 'enumvalue :keyword) #.7))

(cffi:defcenum #.(lispify "pgp_tag" 'enumname)
	(#.(lispify "PGP_TAG_PUBLIC_SESSION_KEY" 'enumvalue :keyword) #.1)
	(#.(lispify "PGP_TAG_SIGNATURE" 'enumvalue :keyword) #.2)
	(#.(lispify "PGP_TAG_SYMMETRIC_SESSION_KEY" 'enumvalue :keyword) #.3)
	(#.(lispify "PGP_TAG_ONE_PASS_SIGNATURE" 'enumvalue :keyword) #.4)
	(#.(lispify "PGP_TAG_SECRET_KEY" 'enumvalue :keyword) #.5)
	(#.(lispify "PGP_TAG_PUBLIC_KEY" 'enumvalue :keyword) #.6)
	(#.(lispify "PGP_TAG_SECRET_SUBKEY" 'enumvalue :keyword) #.7)
	(#.(lispify "PGP_TAG_COMPRESSED" 'enumvalue :keyword) #.8)
	(#.(lispify "PGP_TAG_ENCRYPTED" 'enumvalue :keyword) #.9)
	(#.(lispify "PGP_TAG_MARKER" 'enumvalue :keyword) #.10)
	(#.(lispify "PGP_TAG_LITERAL" 'enumvalue :keyword) #.11)
	(#.(lispify "PGP_TAG_TRUST" 'enumvalue :keyword) #.12)
	(#.(lispify "PGP_TAG_USERID" 'enumvalue :keyword) #.13)
	(#.(lispify "PGP_TAG_PUBLIC_SUBKEY" 'enumvalue :keyword) #.14))

(cffi:defcenum #.(lispify "pgp_signature_type" 'enumname)
	(#.(lispify "PGP_SIGN_BINARY" 'enumvalue :keyword) #.0)
	(#.(lispify "PGP_SIGN_TEXT" 'enumvalue :keyword) #.1)
	(#.(lispify "PGP_SIGN_STANDALONE" 'enumvalue :keyword) #.2)
	(#.(lispify "PGP_SIGN_CERTIFICATION" 'enumvalue :keyword) #.#x10)
	(#.(lispify "PGP_SIGN_CERTIFICATION_PERSONA" 'enumvalue :keyword) #.#x11)
	(#.(lispify "PGP_SIGN_CERTIFICATION_CASUAL" 'enumvalue :keyword) #.#x12)
	(#.(lispify "PGP_SIGN_CERTIFICATION_POSITIVE" 'enumvalue :keyword) #.#x13)
	(#.(lispify "PGP_SIGN_SUBKEY" 'enumvalue :keyword) #.#x18)
	(#.(lispify "PGP_SIGN_KEY" 'enumvalue :keyword) #.#x1f)
	(#.(lispify "PGP_SIGN_REVOCATION" 'enumvalue :keyword) #.#x20)
	(#.(lispify "PGP_SIGN_REVOCATION_SUBKEY" 'enumvalue :keyword) #.#x28)
	(#.(lispify "PGP_SIGN_REVOCATION_CERTIFICATE" 'enumvalue :keyword) #.#x30)
	(#.(lispify "PGP_SIGN_TIMESTAMP" 'enumvalue :keyword) #.#x40))

(cffi:defcenum #.(lispify "pgp_subpacket_tag" 'enumname)
	(#.(lispify "PGP_SUBPACKET_CREATION_TIME" 'enumvalue :keyword) #.2)
	(#.(lispify "PGP_SUBPACKET_SIGNATURE_EXPIRATION_TIME" 'enumvalue :keyword) #.3)
	(#.(lispify "PGP_SUBPACKET_EXPORTABLE_CERTIFICATION" 'enumvalue :keyword) #.4)
	(#.(lispify "PGP_SUBPACKET_TRUST_SIGNATURE" 'enumvalue :keyword) #.5)
	(#.(lispify "PGP_SUBPACKET_REGULAR_EXPRESSION" 'enumvalue :keyword) #.6)
	(#.(lispify "PGP_SUBPACKET_REVOCABLE" 'enumvalue :keyword) #.7)
	(#.(lispify "PGP_SUBPACKET_KEY_EXPIRATION_TIME" 'enumvalue :keyword) #.9)
	(#.(lispify "PGP_SUBPACKET_PLACEHOLDER" 'enumvalue :keyword) #.10)
	(#.(lispify "PGP_SUBPACKET_PREFERRED_SYMMETRIC_ALGORITHMS" 'enumvalue :keyword) #.11)
	(#.(lispify "PGP_SUBPACKET_REVOCATION_KEY" 'enumvalue :keyword) #.12)
	(#.(lispify "PGP_SUBPACKET_ISSUER_KEY_ID" 'enumvalue :keyword) #.16)
	(#.(lispify "PGP_SUBPACKET_NOTATION_DATA" 'enumvalue :keyword) #.20)
	(#.(lispify "PGP_SUBPACKET_PREFERRED_HASH_ALGORITHMS" 'enumvalue :keyword) #.21)
	(#.(lispify "PGP_SUBPACKET_PREFERRED_COMPRESSION_ALGORITHMS" 'enumvalue :keyword) #.22)
	(#.(lispify "PGP_SUBPACKET_KEY_SERVER_PREFERENCES" 'enumvalue :keyword) #.23)
	(#.(lispify "PGP_SUBPACKET_PREFERRED_KEY_SERVER" 'enumvalue :keyword) #.24)
	(#.(lispify "PGP_SUBPACKET_PRIMARY_USER_ID" 'enumvalue :keyword) #.25)
	(#.(lispify "PGP_SUBPACKET_POLICY_URL" 'enumvalue :keyword) #.26)
	(#.(lispify "PGP_SUBPACKET_KEY_FLAGS" 'enumvalue :keyword) #.27)
	(#.(lispify "PGP_SUBPACKET_SIGNERS_USER_ID" 'enumvalue :keyword) #.28)
	(#.(lispify "PGP_SUBPACKET_REASON_FOR_REVOCATION" 'enumvalue :keyword) #.29))

(cffi:defcfun ("_nettle_pkcs1_signature_prefix" #.(lispify "_nettle_pkcs1_signature_prefix" 'function)) :pointer
  (key_size :unsigned-int)
  (buffer :pointer)
  (id_size :unsigned-int)
  (id :pointer)
  (digest_size :unsigned-int))

(cffi:defcfun ("nettle_pkcs1_encrypt" #.(lispify "nettle_pkcs1_encrypt" 'function)) :int
  (key_size :unsigned-int)
  (random_ctx :pointer)
  (random :pointer)
  (length :unsigned-int)
  (message :pointer)
  (m :pointer))

(cffi:defcfun ("nettle_pkcs1_decrypt" #.(lispify "nettle_pkcs1_decrypt" 'function)) :int
  (key_size :unsigned-int)
  (m :pointer)
  (length :pointer)
  (message :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_digest_encode" #.(lispify "nettle_pkcs1_rsa_digest_encode" 'function)) :int
  (m :pointer)
  (key_size :unsigned-int)
  (di_length :unsigned-int)
  (digest_info :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_md5_encode" #.(lispify "nettle_pkcs1_rsa_md5_encode" 'function)) :int
  (m :pointer)
  (length :unsigned-int)
  (hash :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_md5_encode_digest" #.(lispify "nettle_pkcs1_rsa_md5_encode_digest" 'function)) :int
  (m :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_sha1_encode" #.(lispify "nettle_pkcs1_rsa_sha1_encode" 'function)) :int
  (m :pointer)
  (length :unsigned-int)
  (hash :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_sha1_encode_digest" #.(lispify "nettle_pkcs1_rsa_sha1_encode_digest" 'function)) :int
  (m :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_sha256_encode" #.(lispify "nettle_pkcs1_rsa_sha256_encode" 'function)) :int
  (m :pointer)
  (length :unsigned-int)
  (hash :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_sha256_encode_digest" #.(lispify "nettle_pkcs1_rsa_sha256_encode_digest" 'function)) :int
  (m :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_sha512_encode" #.(lispify "nettle_pkcs1_rsa_sha512_encode" 'function)) :int
  (m :pointer)
  (length :unsigned-int)
  (hash :pointer))

(cffi:defcfun ("nettle_pkcs1_rsa_sha512_encode_digest" #.(lispify "nettle_pkcs1_rsa_sha512_encode_digest" 'function)) :int
  (m :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_realloc" #.(lispify "nettle_realloc" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int))

(cffi:defcfun ("nettle_xrealloc" #.(lispify "nettle_xrealloc" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int))

(cl:defconstant #.(lispify "RIPEMD160_DIGEST_SIZE" 'constant) 20)

(cl:defconstant #.(lispify "RIPEMD160_DATA_SIZE" 'constant) 64)

(cl:defconstant #.(lispify "_RIPEMD160_DIGEST_LENGTH" 'constant) 5)

(cffi:defcstruct #.(lispify "ripemd160_ctx" 'classname)
	(#.(lispify "state" 'slotname) :pointer)
	(#.(lispify "count_low" 'slotname) :pointer)
	(#.(lispify "count_high" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_ripemd160_init" #.(lispify "nettle_ripemd160_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_ripemd160_update" #.(lispify "nettle_ripemd160_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_ripemd160_digest" #.(lispify "nettle_ripemd160_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("_nettle_ripemd160_compress" #.(lispify "_nettle_ripemd160_compress" 'function)) :void
  (state :pointer)
  (data :pointer))

(cl:defconstant #.(lispify "RSA_MINIMUM_N_OCTETS" 'constant) 12)

(cl:defconstant #.(lispify "RSA_MINIMUM_N_BITS" 'constant) (cl:* 8 (cl:- 12 7)))

(cffi:defcstruct #.(lispify "rsa_public_key" 'classname)
	(#.(lispify "size" 'slotname) :unsigned-int)
	(#.(lispify "n" 'slotname) :pointer)
	(#.(lispify "e" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "rsa_private_key" 'classname)
	(#.(lispify "size" 'slotname) :unsigned-int)
	(#.(lispify "d" 'slotname) :pointer)
	(#.(lispify "p" 'slotname) :pointer)
	(#.(lispify "q" 'slotname) :pointer)
	(#.(lispify "a" 'slotname) :pointer)
	(#.(lispify "b" 'slotname) :pointer)
	(#.(lispify "c" 'slotname) :pointer))

(cffi:defcfun ("nettle_rsa_public_key_init" #.(lispify "nettle_rsa_public_key_init" 'function)) :void
  (key :pointer))

(cffi:defcfun ("nettle_rsa_public_key_clear" #.(lispify "nettle_rsa_public_key_clear" 'function)) :void
  (key :pointer))

(cffi:defcfun ("nettle_rsa_public_key_prepare" #.(lispify "nettle_rsa_public_key_prepare" 'function)) :int
  (key :pointer))

(cffi:defcfun ("nettle_rsa_private_key_init" #.(lispify "nettle_rsa_private_key_init" 'function)) :void
  (key :pointer))

(cffi:defcfun ("nettle_rsa_private_key_clear" #.(lispify "nettle_rsa_private_key_clear" 'function)) :void
  (key :pointer))

(cffi:defcfun ("nettle_rsa_private_key_prepare" #.(lispify "nettle_rsa_private_key_prepare" 'function)) :int
  (key :pointer))

(cffi:defcfun ("nettle_rsa_pkcs1_sign" #.(lispify "nettle_rsa_pkcs1_sign" 'function)) :int
  (key :pointer)
  (length :unsigned-int)
  (digest_info :pointer)
  (s :pointer))

(cffi:defcfun ("nettle_rsa_pkcs1_sign_tr" #.(lispify "nettle_rsa_pkcs1_sign_tr" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (length :unsigned-int)
  (digest_info :pointer)
  (s :pointer))

(cffi:defcfun ("nettle_rsa_pkcs1_verify" #.(lispify "nettle_rsa_pkcs1_verify" 'function)) :int
  (key :pointer)
  (length :unsigned-int)
  (digest_info :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_md5_sign" #.(lispify "nettle_rsa_md5_sign" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_md5_verify" #.(lispify "nettle_rsa_md5_verify" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha1_sign" #.(lispify "nettle_rsa_sha1_sign" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha1_verify" #.(lispify "nettle_rsa_sha1_verify" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha256_sign" #.(lispify "nettle_rsa_sha256_sign" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha256_verify" #.(lispify "nettle_rsa_sha256_verify" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha512_sign" #.(lispify "nettle_rsa_sha512_sign" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha512_verify" #.(lispify "nettle_rsa_sha512_verify" 'function)) :int
  (key :pointer)
  (hash :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_md5_sign_digest" #.(lispify "nettle_rsa_md5_sign_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (s :pointer))

(cffi:defcfun ("nettle_rsa_md5_verify_digest" #.(lispify "nettle_rsa_md5_verify_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha1_sign_digest" #.(lispify "nettle_rsa_sha1_sign_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (s :pointer))

(cffi:defcfun ("nettle_rsa_sha1_verify_digest" #.(lispify "nettle_rsa_sha1_verify_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha256_sign_digest" #.(lispify "nettle_rsa_sha256_sign_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (s :pointer))

(cffi:defcfun ("nettle_rsa_sha256_verify_digest" #.(lispify "nettle_rsa_sha256_verify_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_sha512_sign_digest" #.(lispify "nettle_rsa_sha512_sign_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (s :pointer))

(cffi:defcfun ("nettle_rsa_sha512_verify_digest" #.(lispify "nettle_rsa_sha512_verify_digest" 'function)) :int
  (key :pointer)
  (digest :pointer)
  (signature :pointer))

(cffi:defcfun ("nettle_rsa_encrypt" #.(lispify "nettle_rsa_encrypt" 'function)) :int
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (length :unsigned-int)
  (cleartext :pointer)
  (cipher :pointer))

(cffi:defcfun ("nettle_rsa_decrypt" #.(lispify "nettle_rsa_decrypt" 'function)) :int
  (key :pointer)
  (length :pointer)
  (cleartext :pointer)
  (ciphertext :pointer))

(cffi:defcfun ("nettle_rsa_decrypt_tr" #.(lispify "nettle_rsa_decrypt_tr" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (length :pointer)
  (message :pointer)
  (gibberish :pointer))

(cffi:defcfun ("nettle_rsa_compute_root" #.(lispify "nettle_rsa_compute_root" 'function)) :void
  (key :pointer)
  (x :pointer)
  (m :pointer))

(cffi:defcfun ("nettle_rsa_generate_keypair" #.(lispify "nettle_rsa_generate_keypair" 'function)) :int
  (pub :pointer)
  (key :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (progress_ctx :pointer)
  (progress :pointer)
  (n_size :unsigned-int)
  (e_size :unsigned-int))

(cffi:defcfun ("nettle_rsa_keypair_to_sexp" #.(lispify "nettle_rsa_keypair_to_sexp" 'function)) :int
  (buffer :pointer)
  (algorithm_name :string)
  (pub :pointer)
  (priv :pointer))

(cffi:defcfun ("nettle_rsa_keypair_from_sexp_alist" #.(lispify "nettle_rsa_keypair_from_sexp_alist" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (limit :unsigned-int)
  (i :pointer))

(cffi:defcfun ("nettle_rsa_keypair_from_sexp" #.(lispify "nettle_rsa_keypair_from_sexp" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (limit :unsigned-int)
  (length :unsigned-int)
  (expr :pointer))

(cffi:defcfun ("nettle_rsa_public_key_from_der_iterator" #.(lispify "nettle_rsa_public_key_from_der_iterator" 'function)) :int
  (pub :pointer)
  (limit :unsigned-int)
  (i :pointer))

(cffi:defcfun ("nettle_rsa_private_key_from_der_iterator" #.(lispify "nettle_rsa_private_key_from_der_iterator" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (limit :unsigned-int)
  (i :pointer))

(cffi:defcfun ("nettle_rsa_keypair_from_der" #.(lispify "nettle_rsa_keypair_from_der" 'function)) :int
  (pub :pointer)
  (priv :pointer)
  (limit :unsigned-int)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_rsa_keypair_to_openpgp" #.(lispify "nettle_rsa_keypair_to_openpgp" 'function)) :int
  (buffer :pointer)
  (pub :pointer)
  (priv :pointer)
  (userid :string))

(cffi:defcfun ("_nettle_rsa_verify" #.(lispify "_nettle_rsa_verify" 'function)) :int
  (key :pointer)
  (m :pointer)
  (s :pointer))

(cffi:defcfun ("_nettle_rsa_check_size" #.(lispify "_nettle_rsa_check_size" 'function)) :unsigned-int
  (n :pointer))

(cffi:defcfun ("_nettle_rsa_blind" #.(lispify "_nettle_rsa_blind" 'function)) :void
  (pub :pointer)
  (random_ctx :pointer)
  (random :pointer)
  (c :pointer)
  (ri :pointer))

(cffi:defcfun ("_nettle_rsa_unblind" #.(lispify "_nettle_rsa_unblind" 'function)) :void
  (pub :pointer)
  (c :pointer)
  (ri :pointer))

(cl:defconstant #.(lispify "MAX_RSA_MODULUS_LEN" 'constant) 256)

(cffi:defcstruct #.(lispify "R_RSA_PUBLIC_KEY" 'classname)
	(#.(lispify "bits" 'slotname) :unsigned-int)
	(#.(lispify "modulus" 'slotname) :pointer)
	(#.(lispify "exponent" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "R_RSA_PRIVATE_KEY" 'classname)
	(#.(lispify "bits" 'slotname) :unsigned-int)
	(#.(lispify "modulus" 'slotname) :pointer)
	(#.(lispify "publicExponent" 'slotname) :pointer)
	(#.(lispify "exponent" 'slotname) :pointer)
	(#.(lispify "prime" 'slotname) :pointer)
	(#.(lispify "primeExponent" 'slotname) :pointer)
	(#.(lispify "coefficient" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "R_SIGNATURE_CTX" 'classname)
	(#.(lispify "hash" 'slotname) #.(lispify "md5_ctx" 'classname)))

(defanonenum 
	(#.(lispify "DA_MD5" 'enumvalue) #.1))

(defanonenum 
	(#.(lispify "RE_SUCCESS" 'enumvalue) #.0)
	#.(lispify "RE_CONTENT_ENCODING" 'enumvalue)
	#.(lispify "RE_DATA" 'enumvalue)
	#.(lispify "RE_DIGEST_ALGORITHM" 'enumvalue)
	#.(lispify "RE_ENCODING" 'enumvalue)
	#.(lispify "RE_ENCRYPTION_ALGORITHM" 'enumvalue)
	#.(lispify "RE_KEY" 'enumvalue)
	#.(lispify "RE_KEY_ENCODING" 'enumvalue)
	#.(lispify "RE_LEN" 'enumvalue)
	#.(lispify "RE_MODULUS_LEN" 'enumvalue)
	#.(lispify "RE_NEED_RANDOM" 'enumvalue)
	#.(lispify "RE_PRIVATE_KEY" 'enumvalue)
	#.(lispify "RE_PUBLIC_KEY" 'enumvalue)
	#.(lispify "RE_SIGNATURE" 'enumvalue)
	#.(lispify "RE_SIGNATURE_ENCODING" 'enumvalue))

(cffi:defcfun ("nettle_R_SignInit" #.(lispify "nettle_R_SignInit" 'function)) :int
  (ctx :pointer)
  (digestAlgorithm :int))

(cffi:defcfun ("nettle_R_SignUpdate" #.(lispify "nettle_R_SignUpdate" 'function)) :int
  (ctx :pointer)
  (data :pointer)
  (length :unsigned-int))

(cffi:defcfun ("nettle_R_SignFinal" #.(lispify "nettle_R_SignFinal" 'function)) :int
  (ctx :pointer)
  (signature :pointer)
  (length :pointer)
  (key :pointer))

(cffi:defcfun ("nettle_R_VerifyInit" #.(lispify "nettle_R_VerifyInit" 'function)) :int
  (ctx :pointer)
  (digestAlgorithm :int))

(cffi:defcfun ("nettle_R_VerifyUpdate" #.(lispify "nettle_R_VerifyUpdate" 'function)) :int
  (ctx :pointer)
  (data :pointer)
  (length :unsigned-int))

(cffi:defcfun ("nettle_R_VerifyFinal" #.(lispify "nettle_R_VerifyFinal" 'function)) :int
  (ctx :pointer)
  (signature :pointer)
  (length :unsigned-int)
  (key :pointer))

(cl:defconstant #.(lispify "SALSA20_MIN_KEY_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "SALSA20_MAX_KEY_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "SALSA20_KEY_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "SALSA20_BLOCK_SIZE" 'constant) 64)

(cl:defconstant #.(lispify "SALSA20_IV_SIZE" 'constant) 8)

(cl:defconstant #.(lispify "_SALSA20_INPUT_LENGTH" 'constant) 16)

(cffi:defcstruct #.(lispify "salsa20_ctx" 'classname)
	(#.(lispify "input" 'slotname) :pointer))

(cffi:defcfun ("nettle_salsa20_set_key" #.(lispify "nettle_salsa20_set_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_salsa20_set_iv" #.(lispify "nettle_salsa20_set_iv" 'function)) :void
  (ctx :pointer)
  (iv :pointer))

(cffi:defcfun ("nettle_salsa20_crypt" #.(lispify "nettle_salsa20_crypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_salsa20r12_crypt" #.(lispify "nettle_salsa20r12_crypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("_nettle_salsa20_core" #.(lispify "_nettle_salsa20_core" 'function)) :void
  (dst :pointer)
  (src :pointer)
  (rounds :unsigned-int))

(cl:defconstant #.(lispify "SERPENT_BLOCK_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "SERPENT_KEY_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "SERPENT_MIN_KEY_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "SERPENT_MAX_KEY_SIZE" 'constant) 32)

(cffi:defcstruct #.(lispify "serpent_ctx" 'classname)
	(#.(lispify "keys" 'slotname) :pointer))

(cffi:defcfun ("nettle_serpent_set_key" #.(lispify "nettle_serpent_set_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_serpent_encrypt" #.(lispify "nettle_serpent_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_serpent_decrypt" #.(lispify "nettle_serpent_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcenum #.(lispify "sexp_type" 'enumname)
	#.(lispify "SEXP_ATOM" 'enumvalue :keyword)
	#.(lispify "SEXP_LIST" 'enumvalue :keyword)
	#.(lispify "SEXP_END" 'enumvalue :keyword))

(cffi:defcstruct #.(lispify "sexp_iterator" 'classname)
	(#.(lispify "length" 'slotname) :unsigned-int)
	(#.(lispify "buffer" 'slotname) :pointer)
	(#.(lispify "start" 'slotname) :unsigned-int)
	(#.(lispify "pos" 'slotname) :unsigned-int)
	(#.(lispify "level" 'slotname) :unsigned-int)
	(#.(lispify "type" 'slotname) #.(lispify "sexp_type" 'enumname))
	(#.(lispify "display_length" 'slotname) :unsigned-int)
	(#.(lispify "display" 'slotname) :pointer)
	(#.(lispify "atom_length" 'slotname) :unsigned-int)
	(#.(lispify "atom" 'slotname) :pointer))

(cffi:defcfun ("nettle_sexp_iterator_first" #.(lispify "nettle_sexp_iterator_first" 'function)) :int
  (iterator :pointer)
  (length :unsigned-int)
  (input :pointer))

(cffi:defcfun ("nettle_sexp_transport_iterator_first" #.(lispify "nettle_sexp_transport_iterator_first" 'function)) :int
  (iterator :pointer)
  (length :unsigned-int)
  (input :pointer))

(cffi:defcfun ("nettle_sexp_iterator_next" #.(lispify "nettle_sexp_iterator_next" 'function)) :int
  (iterator :pointer))

(cffi:defcfun ("nettle_sexp_iterator_enter_list" #.(lispify "nettle_sexp_iterator_enter_list" 'function)) :int
  (iterator :pointer))

(cffi:defcfun ("nettle_sexp_iterator_exit_list" #.(lispify "nettle_sexp_iterator_exit_list" 'function)) :int
  (iterator :pointer))

(cffi:defcfun ("nettle_sexp_iterator_subexpr" #.(lispify "nettle_sexp_iterator_subexpr" 'function)) :pointer
  (iterator :pointer)
  (length :pointer))

(cffi:defcfun ("nettle_sexp_iterator_get_uint32" #.(lispify "nettle_sexp_iterator_get_uint32" 'function)) :int
  (iterator :pointer)
  (x :pointer))

(cffi:defcfun ("nettle_sexp_iterator_check_type" #.(lispify "nettle_sexp_iterator_check_type" 'function)) :int
  (iterator :pointer)
  (type :pointer))

(cffi:defcfun ("nettle_sexp_iterator_check_types" #.(lispify "nettle_sexp_iterator_check_types" 'function)) :pointer
  (iterator :pointer)
  (ntypes :unsigned-int)
  (types :pointer))

(cffi:defcfun ("nettle_sexp_iterator_assoc" #.(lispify "nettle_sexp_iterator_assoc" 'function)) :int
  (iterator :pointer)
  (nkeys :unsigned-int)
  (keys :pointer)
  (values :pointer))

(cffi:defcfun ("nettle_sexp_format" #.(lispify "nettle_sexp_format" 'function)) :unsigned-int
  (buffer :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("nettle_sexp_vformat" #.(lispify "nettle_sexp_vformat" 'function)) :unsigned-int
  (buffer :pointer)
  (format :string)
  (args :pointer))

(cffi:defcfun ("nettle_sexp_transport_format" #.(lispify "nettle_sexp_transport_format" 'function)) :unsigned-int
  (buffer :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("nettle_sexp_transport_vformat" #.(lispify "nettle_sexp_transport_vformat" 'function)) :unsigned-int
  (buffer :pointer)
  (format :string)
  (args :pointer))

(cffi:defcvar ("nettle_sexp_token_chars" #.(lispify "nettle_sexp_token_chars" 'variable))
 :pointer)

(cl:defconstant #.(lispify "SHA1_DIGEST_SIZE" 'constant) 20)

(cl:defconstant #.(lispify "SHA1_DATA_SIZE" 'constant) 64)

(cl:defconstant #.(lispify "_SHA1_DIGEST_LENGTH" 'constant) 5)

(cffi:defcstruct #.(lispify "sha1_ctx" 'classname)
	(#.(lispify "state" 'slotname) :pointer)
	(#.(lispify "count_low" 'slotname) :pointer)
	(#.(lispify "count_high" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_sha1_init" #.(lispify "nettle_sha1_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha1_update" #.(lispify "nettle_sha1_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_sha1_digest" #.(lispify "nettle_sha1_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("_nettle_sha1_compress" #.(lispify "_nettle_sha1_compress" 'function)) :void
  (state :pointer)
  (data :pointer))

(cl:defconstant #.(lispify "SHA256_DIGEST_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "SHA256_DATA_SIZE" 'constant) 64)

(cl:defconstant #.(lispify "_SHA256_DIGEST_LENGTH" 'constant) 8)

(cffi:defcstruct #.(lispify "sha256_ctx" 'classname)
	(#.(lispify "state" 'slotname) :pointer)
	(#.(lispify "count_low" 'slotname) :pointer)
	(#.(lispify "count_high" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_sha256_init" #.(lispify "nettle_sha256_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha256_update" #.(lispify "nettle_sha256_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_sha256_digest" #.(lispify "nettle_sha256_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("_nettle_sha256_compress" #.(lispify "_nettle_sha256_compress" 'function)) :void
  (state :pointer)
  (data :pointer)
  (k :pointer))

(cl:defconstant #.(lispify "SHA224_DIGEST_SIZE" 'constant) 28)

(cl:defconstant #.(lispify "SHA224_DATA_SIZE" 'constant) 64)

(cffi:defcfun ("nettle_sha224_init" #.(lispify "nettle_sha224_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha224_digest" #.(lispify "nettle_sha224_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cl:defconstant #.(lispify "SHA512_DIGEST_SIZE" 'constant) 64)

(cl:defconstant #.(lispify "SHA512_DATA_SIZE" 'constant) 128)

(cl:defconstant #.(lispify "_SHA512_DIGEST_LENGTH" 'constant) 8)

(cffi:defcstruct #.(lispify "sha512_ctx" 'classname)
	(#.(lispify "state" 'slotname) :pointer)
	(#.(lispify "count_low" 'slotname) :pointer)
	(#.(lispify "count_high" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_sha512_init" #.(lispify "nettle_sha512_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha512_update" #.(lispify "nettle_sha512_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_sha512_digest" #.(lispify "nettle_sha512_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("_nettle_sha512_compress" #.(lispify "_nettle_sha512_compress" 'function)) :void
  (state :pointer)
  (data :pointer)
  (k :pointer))

(cl:defconstant #.(lispify "SHA384_DIGEST_SIZE" 'constant) 48)

(cl:defconstant #.(lispify "SHA384_DATA_SIZE" 'constant) 128)

(cffi:defcfun ("nettle_sha384_init" #.(lispify "nettle_sha384_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha384_digest" #.(lispify "nettle_sha384_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cl:defconstant #.(lispify "SHA3_STATE_LENGTH" 'constant) 25)

(cffi:defcstruct #.(lispify "sha3_state" 'classname)
	(#.(lispify "a" 'slotname) :pointer))

(cffi:defcfun ("nettle_sha3_permute" #.(lispify "nettle_sha3_permute" 'function)) :void
  (state :pointer))

(cffi:defcfun ("_nettle_sha3_update" #.(lispify "_nettle_sha3_update" 'function)) :unsigned-int
  (state :pointer)
  (block_size :unsigned-int)
  (block :pointer)
  (pos :unsigned-int)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("_nettle_sha3_pad" #.(lispify "_nettle_sha3_pad" 'function)) :void
  (state :pointer)
  (block_size :unsigned-int)
  (block :pointer)
  (pos :unsigned-int))

(cl:defconstant #.(lispify "SHA3_224_DIGEST_SIZE" 'constant) 28)

(cl:defconstant #.(lispify "SHA3_224_DATA_SIZE" 'constant) 144)

(cl:defconstant #.(lispify "SHA3_256_DIGEST_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "SHA3_256_DATA_SIZE" 'constant) 136)

(cl:defconstant #.(lispify "SHA3_384_DIGEST_SIZE" 'constant) 48)

(cl:defconstant #.(lispify "SHA3_384_DATA_SIZE" 'constant) 104)

(cl:defconstant #.(lispify "SHA3_512_DIGEST_SIZE" 'constant) 64)

(cl:defconstant #.(lispify "SHA3_512_DATA_SIZE" 'constant) 72)

(cffi:defcstruct #.(lispify "sha3_224_ctx" 'classname)
	(#.(lispify "state" 'slotname) #.(lispify "sha3_state" 'classname))
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "block" 'slotname) :pointer))

(cffi:defcfun ("nettle_sha3_224_init" #.(lispify "nettle_sha3_224_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha3_224_update" #.(lispify "nettle_sha3_224_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_sha3_224_digest" #.(lispify "nettle_sha3_224_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "sha3_256_ctx" 'classname)
	(#.(lispify "state" 'slotname) #.(lispify "sha3_state" 'classname))
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "block" 'slotname) :pointer))

(cffi:defcfun ("nettle_sha3_256_init" #.(lispify "nettle_sha3_256_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha3_256_update" #.(lispify "nettle_sha3_256_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_sha3_256_digest" #.(lispify "nettle_sha3_256_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "sha3_384_ctx" 'classname)
	(#.(lispify "state" 'slotname) #.(lispify "sha3_state" 'classname))
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "block" 'slotname) :pointer))

(cffi:defcfun ("nettle_sha3_384_init" #.(lispify "nettle_sha3_384_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha3_384_update" #.(lispify "nettle_sha3_384_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_sha3_384_digest" #.(lispify "nettle_sha3_384_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcstruct #.(lispify "sha3_512_ctx" 'classname)
	(#.(lispify "state" 'slotname) #.(lispify "sha3_state" 'classname))
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "block" 'slotname) :pointer))

(cffi:defcfun ("nettle_sha3_512_init" #.(lispify "nettle_sha3_512_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_sha3_512_update" #.(lispify "nettle_sha3_512_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_sha3_512_digest" #.(lispify "nettle_sha3_512_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cl:defconstant #.(lispify "TWOFISH_BLOCK_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "TWOFISH_MIN_KEY_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "TWOFISH_MAX_KEY_SIZE" 'constant) 32)

(cl:defconstant #.(lispify "TWOFISH_KEY_SIZE" 'constant) 32)

(cffi:defcstruct #.(lispify "twofish_ctx" 'classname)
	(#.(lispify "keys" 'slotname) :pointer)
	(#.(lispify "s_box" 'slotname) :pointer))

(cffi:defcfun ("nettle_twofish_set_key" #.(lispify "nettle_twofish_set_key" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (key :pointer))

(cffi:defcfun ("nettle_twofish_encrypt" #.(lispify "nettle_twofish_encrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("nettle_twofish_decrypt" #.(lispify "nettle_twofish_decrypt" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer)
  (src :pointer))

(cl:defconstant #.(lispify "UMAC_KEY_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "UMAC32_DIGEST_SIZE" 'constant) 4)

(cl:defconstant #.(lispify "UMAC64_DIGEST_SIZE" 'constant) 8)

(cl:defconstant #.(lispify "UMAC96_DIGEST_SIZE" 'constant) 12)

(cl:defconstant #.(lispify "UMAC128_DIGEST_SIZE" 'constant) 16)

(cl:defconstant #.(lispify "UMAC_DATA_SIZE" 'constant) 1024)

(cl:defconstant #.(lispify "_UMAC_NONCE_CACHED" 'constant) #x80)

(cffi:defcstruct #.(lispify "umac32_ctx" 'classname)
	(#.(lispify "l1_key" 'slotname) :pointer)
	(#.(lispify "l2_key" 'slotname) :pointer)
	(#.(lispify "l3_key1" 'slotname) :pointer)
	(#.(lispify "l3_key2" 'slotname) :pointer)
	(#.(lispify "pdf_key" 'slotname) #.(lispify "aes_ctx" 'classname))
	(#.(lispify "l2_state" 'slotname) :pointer)
	(#.(lispify "nonce" 'slotname) :pointer)
	(#.(lispify "nonce_length" 'slotname) :unsigned-short)
	(#.(lispify "nonce_low" 'slotname) :unsigned-short)
	(#.(lispify "pad_cache" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "count" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "umac64_ctx" 'classname)
	(#.(lispify "l1_key" 'slotname) :pointer)
	(#.(lispify "l2_key" 'slotname) :pointer)
	(#.(lispify "l3_key1" 'slotname) :pointer)
	(#.(lispify "l3_key2" 'slotname) :pointer)
	(#.(lispify "pdf_key" 'slotname) #.(lispify "aes_ctx" 'classname))
	(#.(lispify "l2_state" 'slotname) :pointer)
	(#.(lispify "nonce" 'slotname) :pointer)
	(#.(lispify "nonce_length" 'slotname) :unsigned-short)
	(#.(lispify "nonce_low" 'slotname) :unsigned-short)
	(#.(lispify "pad_cache" 'slotname) :pointer)
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "count" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "umac96_ctx" 'classname)
	(#.(lispify "l1_key" 'slotname) :pointer)
	(#.(lispify "l2_key" 'slotname) :pointer)
	(#.(lispify "l3_key1" 'slotname) :pointer)
	(#.(lispify "l3_key2" 'slotname) :pointer)
	(#.(lispify "pdf_key" 'slotname) #.(lispify "aes_ctx" 'classname))
	(#.(lispify "l2_state" 'slotname) :pointer)
	(#.(lispify "nonce" 'slotname) :pointer)
	(#.(lispify "nonce_length" 'slotname) :unsigned-short)
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "count" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer))

(cffi:defcstruct #.(lispify "umac128_ctx" 'classname)
	(#.(lispify "l1_key" 'slotname) :pointer)
	(#.(lispify "l2_key" 'slotname) :pointer)
	(#.(lispify "l3_key1" 'slotname) :pointer)
	(#.(lispify "l3_key2" 'slotname) :pointer)
	(#.(lispify "pdf_key" 'slotname) #.(lispify "aes_ctx" 'classname))
	(#.(lispify "l2_state" 'slotname) :pointer)
	(#.(lispify "nonce" 'slotname) :pointer)
	(#.(lispify "nonce_length" 'slotname) :unsigned-short)
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "count" 'slotname) :pointer)
	(#.(lispify "block" 'slotname) :pointer))

(cffi:defcfun ("nettle_umac32_set_key" #.(lispify "nettle_umac32_set_key" 'function)) :void
  (ctx :pointer)
  (key :pointer))

(cffi:defcfun ("nettle_umac64_set_key" #.(lispify "nettle_umac64_set_key" 'function)) :void
  (ctx :pointer)
  (key :pointer))

(cffi:defcfun ("nettle_umac96_set_key" #.(lispify "nettle_umac96_set_key" 'function)) :void
  (ctx :pointer)
  (key :pointer))

(cffi:defcfun ("nettle_umac128_set_key" #.(lispify "nettle_umac128_set_key" 'function)) :void
  (ctx :pointer)
  (key :pointer))

(cffi:defcfun ("nettle_umac32_set_nonce" #.(lispify "nettle_umac32_set_nonce" 'function)) :void
  (ctx :pointer)
  (nonce_length :unsigned-int)
  (nonce :pointer))

(cffi:defcfun ("nettle_umac64_set_nonce" #.(lispify "nettle_umac64_set_nonce" 'function)) :void
  (ctx :pointer)
  (nonce_length :unsigned-int)
  (nonce :pointer))

(cffi:defcfun ("nettle_umac96_set_nonce" #.(lispify "nettle_umac96_set_nonce" 'function)) :void
  (ctx :pointer)
  (nonce_length :unsigned-int)
  (nonce :pointer))

(cffi:defcfun ("nettle_umac128_set_nonce" #.(lispify "nettle_umac128_set_nonce" 'function)) :void
  (ctx :pointer)
  (nonce_length :unsigned-int)
  (nonce :pointer))

(cffi:defcfun ("nettle_umac32_update" #.(lispify "nettle_umac32_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_umac64_update" #.(lispify "nettle_umac64_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_umac96_update" #.(lispify "nettle_umac96_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_umac128_update" #.(lispify "nettle_umac128_update" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_umac32_digest" #.(lispify "nettle_umac32_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_umac64_digest" #.(lispify "nettle_umac64_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_umac96_digest" #.(lispify "nettle_umac96_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cffi:defcfun ("nettle_umac128_digest" #.(lispify "nettle_umac128_digest" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (digest :pointer))

(cl:defconstant #.(lispify "UMAC_POLY64_BLOCKS" 'constant) 16384)

(cl:defconstant #.(lispify "UMAC_P64_OFFSET" 'constant) 59)

(cl:defconstant #.(lispify "UMAC_P128_OFFSET" 'constant) 159)

(cffi:defcfun ("_nettle_umac_set_key" #.(lispify "_nettle_umac_set_key" 'function)) :void
  (l1_key :pointer)
  (l2_key :pointer)
  (l3_key1 :pointer)
  (l3_key2 :pointer)
  (pad :pointer)
  (key :pointer)
  (n :unsigned-int))

(cffi:defcfun ("_nettle_umac_nh" #.(lispify "_nettle_umac_nh" 'function)) :pointer
  (key :pointer)
  (length :unsigned-int)
  (msg :pointer))

(cffi:defcfun ("_nettle_umac_nh_n" #.(lispify "_nettle_umac_nh_n" 'function)) :void
  (out :pointer)
  (n :unsigned-int)
  (key :pointer)
  (length :unsigned-int)
  (msg :pointer))

(cffi:defcfun ("_nettle_umac_poly64" #.(lispify "_nettle_umac_poly64" 'function)) :pointer
  (kh :pointer)
  (kl :pointer)
  (y :pointer)
  (m :pointer))

(cffi:defcfun ("_nettle_umac_poly128" #.(lispify "_nettle_umac_poly128" 'function)) :void
  (k :pointer)
  (y :pointer)
  (mh :pointer)
  (ml :pointer))

(cffi:defcfun ("_nettle_umac_l2_init" #.(lispify "_nettle_umac_l2_init" 'function)) :void
  (size :unsigned-int)
  (k :pointer))

(cffi:defcfun ("_nettle_umac_l2" #.(lispify "_nettle_umac_l2" 'function)) :void
  (key :pointer)
  (state :pointer)
  (n :unsigned-int)
  (count :pointer)
  (m :pointer))

(cffi:defcfun ("_nettle_umac_l2_final" #.(lispify "_nettle_umac_l2_final" 'function)) :void
  (key :pointer)
  (state :pointer)
  (n :unsigned-int)
  (count :pointer))

(cffi:defcfun ("_nettle_umac_l3_init" #.(lispify "_nettle_umac_l3_init" 'function)) :void
  (size :unsigned-int)
  (k :pointer))

(cffi:defcfun ("_nettle_umac_l3" #.(lispify "_nettle_umac_l3" 'function)) :pointer
  (key :pointer)
  (m :pointer))

(cffi:defcenum #.(lispify "yarrow_pool_id" 'enumname)
	(#.(lispify "YARROW_FAST" 'enumvalue :keyword) #.0)
	(#.(lispify "YARROW_SLOW" 'enumvalue :keyword) #.1))

(cffi:defcstruct #.(lispify "yarrow_source" 'classname)
	(#.(lispify "estimate" 'slotname) :pointer)
	(#.(lispify "next" 'slotname) #.(lispify "yarrow_pool_id" 'enumname)))

(cl:defconstant #.(lispify "YARROW256_SEED_FILE_SIZE" 'constant) (cl:* 2 16))

(cffi:defcstruct #.(lispify "yarrow256_ctx" 'classname)
	(#.(lispify "pools" 'slotname) :pointer)
	(#.(lispify "seeded" 'slotname) :int)
	(#.(lispify "key" 'slotname) #.(lispify "aes_ctx" 'classname))
	(#.(lispify "counter" 'slotname) :pointer)
	(#.(lispify "nsources" 'slotname) :unsigned-int)
	(#.(lispify "sources" 'slotname) :pointer))

(cffi:defcfun ("nettle_yarrow256_init" #.(lispify "nettle_yarrow256_init" 'function)) :void
  (ctx :pointer)
  (nsources :unsigned-int)
  (sources :pointer))

(cffi:defcfun ("nettle_yarrow256_seed" #.(lispify "nettle_yarrow256_seed" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (seed_file :pointer))

(cffi:defcfun ("nettle_yarrow256_update" #.(lispify "nettle_yarrow256_update" 'function)) :int
  (ctx :pointer)
  (source :unsigned-int)
  (entropy :unsigned-int)
  (length :unsigned-int)
  (data :pointer))

(cffi:defcfun ("nettle_yarrow256_random" #.(lispify "nettle_yarrow256_random" 'function)) :void
  (ctx :pointer)
  (length :unsigned-int)
  (dst :pointer))

(cffi:defcfun ("nettle_yarrow256_is_seeded" #.(lispify "nettle_yarrow256_is_seeded" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("nettle_yarrow256_needed_sources" #.(lispify "nettle_yarrow256_needed_sources" 'function)) :unsigned-int
  (ctx :pointer))

(cffi:defcfun ("nettle_yarrow256_fast_reseed" #.(lispify "nettle_yarrow256_fast_reseed" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_yarrow256_slow_reseed" #.(lispify "nettle_yarrow256_slow_reseed" 'function)) :void
  (ctx :pointer))

(cl:defconstant #.(lispify "YARROW_KEY_EVENT_BUFFER" 'constant) 16)

(cffi:defcstruct #.(lispify "yarrow_key_event_ctx" 'classname)
	(#.(lispify "index" 'slotname) :unsigned-int)
	(#.(lispify "chars" 'slotname) :pointer)
	(#.(lispify "previous" 'slotname) :unsigned-int))

(cffi:defcfun ("nettle_yarrow_key_event_init" #.(lispify "nettle_yarrow_key_event_init" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("nettle_yarrow_key_event_estimate" #.(lispify "nettle_yarrow_key_event_estimate" 'function)) :unsigned-int
  (ctx :pointer)
  (key :unsigned-int)
  (time :unsigned-int))


